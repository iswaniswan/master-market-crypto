<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $username
 * @property string|null $email
 * @property string $password
 * @property int|null $id_role
 * @property string|null $auth_key
 * @property string|null $access_token
 * @property int|null $is_deleted
 * @property string|null $date_create
 * @property string|null $registered_referral_code
 * @property Role|null $role
 * @property Member|null $member
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    public $remember_me;
    public $accept_terms;
    // public $registered_referral_code;
    public $nama;
    public $phone;
    public $bank;
    public $rekening;
    public $rekening_an;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username', 'email', 'password',], 'required'],
            [['id_role', 'is_deleted'], 'integer'],
            [['date_create'], 'safe'],
            [['username', 'email', 'password', 'pin', 'auth_key', 'access_token', 'registered_referral_code'], 'string', 'max' => 255],
            [['username'], 'unique'],
            [['remember_me', 'accept_terms', 'username', 'nama', 'phone', 'bank', 'rekening', 'rekening_an'], 'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => 'Username',
            'email' => 'Email',
            'password' => 'Password',
            'pin' => 'Pin',
            'id_role' => 'Id Role',
            'auth_key' => 'Auth Key',
            'access_token' => 'Access Token',
            'is_deleted' => 'Is Deleted',
            'date_create' => 'Date Create',
            'registered_referral_code' => 'Referral Code'
        ];
    }

    public static function findIdentity($id)
    {
        // TODO: Implement findIdentity() method.
        return static::findOne($id);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
        return static::findOne(['access_token' => $token]);
    }

    public function getId()
    {
        // TODO: Implement getId() method.
        return $this->id;
    }

    public function getAuthKey()
    {
        // TODO: Implement getAuthKey() method.
        return $this->auth_key;
    }

    public function validateAuthKey($authKey)
    {
        // TODO: Implement validateAuthKey() method.
        return $this->auth_key === $authKey;
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    public static function findByusername($username)
    {
        $_username = strtolower($username);
        return self::findOne(['username' => $_username]);
    }

    public static function findByEmail($email)
    {
        $_email = strtolower($email);
        return self::findone(['email' => $_email]);
    }

    public function setPasswordHash()
    {
        $this->password = Yii::$app->getSecurity()->generatePasswordHash($this->password);
    }

    public function beforeSave($insert)
    {
        $this->username = strtolower($this->username);

        if ($this->username == '' || $this->username == null) {
            $this->username = $this->generateRandomUsername();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    protected function generateRandomUsername()
    {
        if ($this->email == null) {
            return Yii::$app->getSecurity()->generateRandomString(8);
        }

        $second = date('s');

        $arr = explode('@', $this->email);
        return "$arr[0]-$second";
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRole()
    {
        return $this->hasOne(Role::class, ['id' => 'id_role']);
    }

    public function softDelete()
    {     
        $this->updateAttributes([
            'is_deleted' => 1
        ]);

        return true;
    }

    public function getMember()
    {
        return $this->hasOne(Member::class, ['id_user' => 'id']);
    }

    public static function createFromMember(Member $member)
    {
        $text_password = $member->password;
        $password = Yii::$app->getSecurity()->generatePasswordHash($text_password);

        $model = new User([
            'username' => $member->username,
            'password' => $password,
            'pin' => $member->pin,
            'email' => $member->email,
            'id_role' => Role::MEMBER
        ]);

        if ($model->save()) {
            return $model;
        }

        var_dump($model->errors);
        die();
    }

    public static function createDistributorFromMember(Member $member)
    {
        $text_password = $member->password;
        $password = Yii::$app->getSecurity()->generatePasswordHash($text_password);

        $model = new User([
            'username' => $member->username,
            'password' => $password,
            'pin' => $member->pin,
            'email' => $member->email,
            'id_role' => Role::DISTRIBUTOR
        ]);

        if ($model->save()) {
            return $model;
        }

        var_dump($model->errors);
        die();
    }

    public static function generateFromEmail($email=null)
    {        
        $number = rand(1000,9999);

        if ($email == null) {
            return $number;
        }

        $arr = explode('@', $email);
        return "$arr[0]_$number";
    }

}
